=============================================================
# Subset sum:
# max weight, sequence of weights (separator: S)
# Attention: List of Elements doesn't work, use Knapsack
python SubsetSum.py 20 3S4S5S7S11

=============================================================
# Knapsack:
# max weight, sequence of weights (separator: S), sequence of values (S)
# Subset sum by setting weights and values equal
python Knapsack.py 20 3S4S5S7S11 3S4S5S7S11
python Knapsack.py 10 4S4S5S3S2S6 10S11S14S6S5S14

=============================================================
# Minimum Spannung tree
# Two programmes: GraphMST selv programmed Kruskal
# GraphMST is framework implementation of Prim and Kruskal
# Use (GraphMST only accepts numbers as node names):
python GraphMST.py
python GraphMST2.py

=============================================================
# Edit distance:
# Takes as input two words
# Calculates control value via Levensthein framework
python EditDistance.py klinger klingre

=============================================================
# BellmanFord
# Calculates shortest path in graph
# Input path lengths in code
# Does not output internal table
# Long version has output
python BellmanFord.py
python BellmanFordLong.py

=============================================================
# Dijkstra
# Shortest path without negative edges
# Input path lengths in code
# Argument is start node
python Dijkstra.py a

=============================================================
# FordFulkerson
# Two programmes, one for the entire algorithm and one for one iteration

# Entire programme: insert edge weights in tuple orig_cap
python FordFulkerson.py

# Just one iteration, three lists (third redundant, sorry)
# orig_cap: edge weights in original graph
# g_edges_used: used flow at the moment
# g_f_edges: all edges of residual graph
python FordFulkersonInner.py

=============================================================
# Hufman
# insert string as argument, spaces with "_" string
# Make sure the | are positioned like PÃ¥l wants them to be (like at beginning or end of word)
# Second programme without words, but frequencies
python HufmannTree.py testiest_sensitiveness
python HufmanWithoutWord.py

=============================================================